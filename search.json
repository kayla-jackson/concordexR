[{"path":"/articles/nomap-demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using nomap in place of UMAP in scRNA-seq","text":"UMAP commonly used scRNA-seq data analysis visualization tool projecting high dimensional data onto 2 dimensions visualize cell clustering. However, UMAP prone showing spurious clustering distorting distances (Chari, Banerjee, Pachter 2021). Moreover, UMAP shows clustering seems correspond graph-based clusters Louvain Leiden k nearest neighbor graph used clustering UMAP. developed nomap quantitative alternative UMAP cluster visualization without misleading problems UMAP. package R implementation original Python command line tool. nutshell, nomap finds proportion cells among k nearest neighbors cell cluster label cell . computed across labels average labels returned metric indicates quality clustering. see significant, labels permuted estimate null distribution actual observed value compared simulated values. clustering separates cells well, observed value much higher simulated values, .e. neighborhood cell dominated cells label cell interest chance.","code":"library(nomapR) library(TENxPBMCData) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Loading required package: HDF5Array #> Loading required package: DelayedArray #> Loading required package: Matrix #>  #> Attaching package: 'Matrix' #> The following object is masked from 'package:S4Vectors': #>  #>     expand #>  #> Attaching package: 'DelayedArray' #> The following objects are masked from 'package:base': #>  #>     apply, rowsum, scale, sweep #> Loading required package: rhdf5 #>  #> Attaching package: 'HDF5Array' #> The following object is masked from 'package:rhdf5': #>  #>     h5ls library(BiocNeighbors) library(bluster) library(scater) #> Loading required package: scuttle #> Loading required package: ggplot2 library(patchwork) library(ggplot2) theme_set(theme_bw())"},{"path":"/articles/nomap-demo.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"Using nomap in place of UMAP in scRNA-seq","text":"vignette, demonstrate usage nomap human peripheral blood mononuclear cells (PBMC) scRNA-seq dataset 10X Genomics. data loaded SingleCellExperiment object. plot standard QC metrics: total number UMIs detected per cell (nCounts), number genes detected (nGenes), percentage UMIs mitochondrially encoded genes (pct_mito).   Remove outliers cells high percentage mitochondrial counts high percentage expected biologically cell type: normalize data:","code":"sce <- TENxPBMCData(\"pbmc3k\") #> snapshotDate(): 2022-10-31 #> see ?TENxPBMCData and browseVignettes('TENxPBMCData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache sce$nCounts <- colSums(counts(sce)) sce$nGenes <- colSums(counts(sce) > 0) mito_inds <- grepl(\"^MT-\", rowData(sce)$Symbol_TENx) sce$pct_mito <- colSums(counts(sce)[mito_inds,])/sce$nCounts * 100 plotColData(sce, \"nCounts\") +   plotColData(sce, \"nGenes\") +   plotColData(sce, \"pct_mito\") p1 <- plotColData(sce, x = \"nCounts\", y = \"nGenes\") +   geom_density2d() p2 <- plotColData(sce, x = \"nCounts\", y = \"pct_mito\") +   geom_density2d() p1 + p2 sce <- sce[, sce$nCounts < 10000 & sce$pct_mito < 8] sce <- sce[rowSums(counts(sce)) > 0,] sce <- logNormCounts(sce)"},{"path":"/articles/nomap-demo.html","id":"graph-based-clustering-in-pca-space","dir":"Articles","previous_headings":"","what":"Graph based clustering in PCA space","title":"Using nomap in place of UMAP in scRNA-seq","text":"simplicity, top 500 highly variable genes used perform PCA: See number PCs use later elbow plot:  Percentage variance explained drops sharply PC1 PC5, definitely levels PC10, use top 10 PCs clustering . graph based Leiden clustering uses k nearest neighbor graph. demonstration , use k = 10. See clusters look like PCA space:  clusters seem well-separated along first 4 PCs. Since UMAP commonly used visualize clusters, plot UMAP although don’t recommend UMAP ’s prone showing spurious clusters distorting distances. UMAP also uses k nearest neighbor graph, use k = 10 :  part, clusters clearly separated UMAP.","code":"sce <- runPCA(sce, ncomponents = 30, ntop = 500, scale = TRUE) plot(attr(reducedDim(sce, \"PCA\"), \"percentVar\"), ylab = \"Percentage of variance explained\") sce$cluster <- clusterRows(reducedDim(sce, \"PCA\")[,seq_len(10)],                            NNGraphParam(k = 10, cluster.fun = \"leiden\",                                         cluster.args = list(                                           objective_function = \"modularity\"                                         ))) plotPCA(sce, color_by = \"cluster\", ncomponents = 4) #> Warning in data.frame(gg1$all, df_to_plot[, -reddim_cols]): row names were #> found from a short variable and have been discarded #> Warning: The dot-dot notation (`..scaled..`) was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(scaled)` instead. #> ℹ The deprecated feature was likely used in the scater package. #>   Please report the issue at <https://support.bioconductor.org/>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. sce <- runUMAP(sce, dimred = \"PCA\", n_dimred = 10, n_neighbors = 10) plotUMAP(sce, color_by = \"cluster\")"},{"path":"/articles/nomap-demo.html","id":"enter-nomap","dir":"Articles","previous_headings":"","what":"Enter nomap","title":"Using nomap in place of UMAP in scRNA-seq","text":"Since UMAP prone showing spurious clusters, ’ll see nomap metric says clustering whether agrees UMAP visualization. explicitly obtain k nearest neighbor graph, clustering UMAP store graph . result list two n (number cell) k matrices. first indices cell’s neighbors, adjacency list can matrix due fixed number neighbors, second distances cell neighbors. nomap, first matrix relevant. adjacency matrix, either sparse dense, stored Seurat object, can also used. cluster labels permuted 100 times. results can visualized plots, implemented R package Python package. actual nomap value can compared simulated values latter visualized density plot:  actual value much higher simulated values, indicating cluster labels reflect actual clusters well. value proportion cells label neighborhood cells label, averaged labels. aid interpretation, ratio observed value average simulated value also returned: number greater 1 means cells likely neighbors label expected chance labels completely randomly assigned, value 7.7 means clusters really good. value average clusters, matrix values cluster also returned default, can visualized heatmap, clustering diagnostic:  heatmap also indicates good clustering, almost neighbors cells cluster labels label, diagonal. diagonal entries interpreted : (,j) means proportion cells label neighborhood cells label j. diagonal entries means ambiguity labels similar cells get different labels. overplotting easily happens UMAP plot, heatmap shows clustering quality unambiguously UMAP.","code":"g <- findKNN(reducedDim(sce, \"PCA\")[,seq_len(10)], k = 10) res <- calculateNomap(g$index, labels = sce$cluster, k = 10, n.iter = 100) plotNomapSim(res) res$corrected_trace #> [1] 7.669867 heatNomap(res, angle_col = 0)"},{"path":"/articles/nomap-demo.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Using nomap in place of UMAP in scRNA-seq","text":"","code":"sessionInfo() #> R version 4.2.3 (2023-03-15) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] patchwork_1.1.2             scater_1.26.1               #>  [3] ggplot2_3.4.1               scuttle_1.8.4               #>  [5] bluster_1.8.0               BiocNeighbors_1.16.0        #>  [7] TENxPBMCData_1.16.0         HDF5Array_1.26.0            #>  [9] rhdf5_2.42.0                DelayedArray_0.24.0         #> [11] Matrix_1.5-3                SingleCellExperiment_1.20.1 #> [13] SummarizedExperiment_1.28.0 Biobase_2.58.0              #> [15] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9         #> [17] IRanges_2.32.0              S4Vectors_0.36.2            #> [19] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [21] matrixStats_0.63.0          nomapR_0.99.0               #> [23] BiocStyle_2.26.0            #>  #> loaded via a namespace (and not attached): #>   [1] AnnotationHub_3.6.0           BiocFileCache_2.6.1           #>   [3] systemfonts_1.0.4             igraph_1.4.1                  #>   [5] BiocParallel_1.32.6           digest_0.6.31                 #>   [7] htmltools_0.5.5               viridis_0.6.2                 #>   [9] fansi_1.0.4                   magrittr_2.0.3                #>  [11] memoise_2.0.1                 ScaledMatrix_1.6.0            #>  [13] cluster_2.1.4                 Biostrings_2.66.0             #>  [15] pkgdown_2.0.7                 colorspace_2.1-0              #>  [17] blob_1.2.4                    rappdirs_0.3.3                #>  [19] ggrepel_0.9.3                 textshaping_0.3.6             #>  [21] xfun_0.38                     dplyr_1.1.1                   #>  [23] crayon_1.5.2                  RCurl_1.98-1.12               #>  [25] jsonlite_1.8.4                glue_1.6.2                    #>  [27] gtable_0.3.3                  zlibbioc_1.44.0               #>  [29] XVector_0.38.0                BiocSingular_1.14.0           #>  [31] Rhdf5lib_1.20.0               scales_1.2.1                  #>  [33] pheatmap_1.0.12               DBI_1.1.3                     #>  [35] Rcpp_1.0.10                   isoband_0.2.7                 #>  [37] viridisLite_0.4.1             xtable_1.8-4                  #>  [39] bit_4.0.5                     rsvd_1.0.5                    #>  [41] httr_1.4.5                    FNN_1.1.3.2                   #>  [43] RColorBrewer_1.1-3            ellipsis_0.3.2                #>  [45] pkgconfig_2.0.3               farver_2.1.1                  #>  [47] sass_0.4.5                    uwot_0.1.14                   #>  [49] dbplyr_2.3.2                  utf8_1.2.3                    #>  [51] tidyselect_1.2.0              labeling_0.4.2                #>  [53] rlang_1.1.0                   later_1.3.0                   #>  [55] AnnotationDbi_1.60.2          munsell_0.5.0                 #>  [57] BiocVersion_3.16.0            tools_4.2.3                   #>  [59] cachem_1.0.7                  cli_3.6.1                     #>  [61] generics_0.1.3                RSQLite_2.3.0                 #>  [63] ExperimentHub_2.6.0           evaluate_0.20                 #>  [65] stringr_1.5.0                 fastmap_1.1.1                 #>  [67] yaml_2.3.7                    ragg_1.2.5                    #>  [69] knitr_1.42                    bit64_4.0.5                   #>  [71] fs_1.6.1                      purrr_1.0.1                   #>  [73] KEGGREST_1.38.0               sparseMatrixStats_1.10.0      #>  [75] mime_0.12                     compiler_4.2.3                #>  [77] beeswarm_0.4.0                filelock_1.0.2                #>  [79] curl_5.0.0                    png_0.1-8                     #>  [81] interactiveDisplayBase_1.36.0 tibble_3.2.1                  #>  [83] bslib_0.4.2                   stringi_1.7.12                #>  [85] highr_0.10                    desc_1.4.2                    #>  [87] lattice_0.20-45               vctrs_0.6.1                   #>  [89] pillar_1.9.0                  lifecycle_1.0.3               #>  [91] rhdf5filters_1.10.1           BiocManager_1.30.20           #>  [93] jquerylib_0.1.4               bitops_1.0-7                  #>  [95] irlba_2.3.5.1                 httpuv_1.6.9                  #>  [97] R6_2.5.1                      bookdown_0.33                 #>  [99] promises_1.2.0.1              gridExtra_2.3                 #> [101] vipor_0.4.5                   codetools_0.2-19              #> [103] MASS_7.3-58.2                 rprojroot_2.0.3               #> [105] withr_2.5.0                   GenomeInfoDbData_1.2.9        #> [107] parallel_4.2.3                grid_4.2.3                    #> [109] beachmat_2.14.0               rmarkdown_2.21                #> [111] DelayedMatrixStats_1.20.0     shiny_1.7.4                   #> [113] ggbeeswarm_0.7.1"},{"path":"/articles/overview.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Overview of nomapR","text":"can install development version nomapR GitHub :","code":"# install.packages(\"devtools\") # devtools::install_github(\"kayla-jackson/nomapR\")"},{"path":"/articles/overview.html","id":"example-of-main-functionality","dir":"Articles","previous_headings":"","what":"Example of main functionality","title":"Overview of nomapR","text":"basic example shows solve common problem:","code":"library(nomapR) library(BiocNeighbors) g <- findKNN(iris[, seq_len(4)], k = 10) #> Warning in (function (to_check, X, clust_centers, clust_info, dtype, nn, : #> detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10, return.map = TRUE) plotNomapSim(res) heatNomap(res)"},{"path":"/articles/overview.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"SessionInfo","title":"Overview of nomapR","text":"","code":"sessionInfo() #> R version 4.2.3 (2023-03-15) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] BiocNeighbors_1.16.0 nomapR_0.99.0        BiocStyle_2.26.0     #>  #> loaded via a namespace (and not attached): #>  [1] Rcpp_1.0.10           lattice_0.20-45       rprojroot_2.0.3       #>  [4] digest_0.6.31         utf8_1.2.3            R6_2.5.1              #>  [7] stats4_4.2.3          evaluate_0.20         highr_0.10            #> [10] ggplot2_3.4.1         pillar_1.9.0          rlang_1.1.0           #> [13] jquerylib_0.1.4       S4Vectors_0.36.2      Matrix_1.5-3          #> [16] rmarkdown_2.21        pkgdown_2.0.7         textshaping_0.3.6     #> [19] desc_1.4.2            labeling_0.4.2        BiocParallel_1.32.6   #> [22] stringr_1.5.0         pheatmap_1.0.12       munsell_0.5.0         #> [25] DelayedArray_0.24.0   compiler_4.2.3        xfun_0.38             #> [28] pkgconfig_2.0.3       systemfonts_1.0.4     BiocGenerics_0.44.0   #> [31] htmltools_0.5.5       tidyselect_1.2.0      tibble_3.2.1          #> [34] bookdown_0.33         IRanges_2.32.0        codetools_0.2-19      #> [37] matrixStats_0.63.0    viridisLite_0.4.1     fansi_1.0.4           #> [40] dplyr_1.1.1           withr_2.5.0           grid_4.2.3            #> [43] jsonlite_1.8.4        gtable_0.3.3          lifecycle_1.0.3       #> [46] magrittr_2.0.3        scales_1.2.1          cli_3.6.1             #> [49] stringi_1.7.12        cachem_1.0.7          farver_2.1.1          #> [52] fs_1.6.1              bslib_0.4.2           ragg_1.2.5            #> [55] vctrs_0.6.1           generics_0.1.3        RColorBrewer_1.1-3    #> [58] tools_4.2.3           glue_1.6.2            purrr_1.0.1           #> [61] MatrixGenerics_1.10.0 parallel_4.2.3        fastmap_1.1.1         #> [64] yaml_2.3.7            colorspace_2.1-0      BiocManager_1.30.20   #> [67] memoise_2.0.1         knitr_1.42            sass_0.4.5"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jackson Kayla. Author, maintainer. Lambda Moses. Author. Laura Luebbert. Contributor. Lior Pachter. Author, reviewer, thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kayla J, Moses L, Pachter L (2023). nomapR: Calculate nomap coefficient. R package version 0.99.0, https://github.com/kayla-jackson/nomapR.","code":"@Manual{,   title = {nomapR: Calculate the nomap coefficient},   author = {Jackson Kayla and Lambda Moses and Lior Pachter},   year = {2023},   note = {R package version 0.99.0},   url = {https://github.com/kayla-jackson/nomapR}, }"},{"path":"/index.html","id":"nomapr","dir":"","previous_headings":"","what":"Calculate the nomap coefficient","title":"Calculate the nomap coefficient","text":"goal nomapR replace UMAP clustering diagnostic.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate the nomap coefficient","text":"can install development version nomapR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kayla-jackson/nomapR\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calculate the nomap coefficient","text":"basic example using nomap:","code":"library(nomapR) library(BiocNeighbors) g <- findKNN(iris[, seq_len(4)], k = 10) #> Warning in (function (to_check, X, clust_centers, clust_info, dtype, nn, : #> detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10, return.map = TRUE) plotNomapSim(res) heatNomap(res)"},{"path":"/reference/calculateNomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Nomap coefficient — calculateNomap","title":"Compute the Nomap coefficient — calculateNomap","text":"Compute raw corrected nomap coefficient using neighborhood graph observation labels.","code":""},{"path":"/reference/calculateNomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Nomap coefficient — calculateNomap","text":"","code":"calculateNomap(x, ...)  # S4 method for ANY calculateNomap(   x,   labels,   k = 20,   n.iter = 15,   return.map = TRUE,   BPPARAM = SerialParam() )"},{"path":"/reference/calculateNomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Nomap coefficient — calculateNomap","text":"x numeric matrix specifying neighborhood structure observations. Typically adjacency matrix produced k-Nearest Neighbor algorithm. can also matrix whose rows correspond observation columns correspond neighbor indices, .e. matrix form adjacency list can matrix due fixed number neighbors. ... Arguments passed methods. labels numeric character vector containing label class corresponding observation. example, cell type cluster ID. k Number neighbors expect observation. Defaults 20. n.iter number specifying number permutations correcting coefficient. return.map Logical, whether return matrix number cells label neighborhood cells label. BPPARAM BiocParallelParam object specifying whether computing metric numerous observations shall parallelized.","code":""},{"path":"/reference/calculateNomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Nomap coefficient — calculateNomap","text":"named list following components: nomap raw nomap coefficient corresponding original label assignments. mean_random_nomap average n.iter nomap coefficients. Nomap coefficients computed permuting labels reassigning new observations. corrected_nomap Simply raw nomap coefficient divided average permuted coefficients. simulated Numeric vector nomap coefficients permuted labels, showing null distribution. map Numeric matrix number cells label neighborhood cells label. returned return.map = TRUE.","code":""},{"path":"/reference/calculateNomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Nomap coefficient — calculateNomap","text":"","code":"# Simplest case where input is a nxn matrix # Neighbors can be oriented along the rows or columns nCells <- 10 k <- 3 labels <- sample(paste0(\"l\", seq_len(3)), nCells, replace=TRUE)  mtx <- sapply(seq_len(nCells), function(x) {     out <- rep(0, nCells)     out[-x] <- sample(c(rep(1, k), rep(0, nCells - k - 1)))     out })  res <- calculateNomap(mtx, labels, k = k)  res #> $nomap #> [1] 0.2091503 #>  #> $mean_random_nomap #> [1] 0.2791711 #>  #> $corrected_trace #> [1] 0.7491833 #>  #> $simulated #>  [1] 0.2653509 0.2679739 0.3166667 0.2805556 0.2070175 0.2333333 0.3363095 #>  [8] 0.2653509 0.2996032 0.2710623 0.3277778 0.3333333 0.2629630 0.2968254 #> [15] 0.2234432 #>  #> $map #>           l1        l2         l3 #> l1 0.2941176 0.4117647 0.00000000 #> l2 0.8333333 0.3333333 0.08333333 #> l3 2.0000000 1.0000000 0.00000000 #>   # Also works if input matrix is nxk or kxn mtx <- sapply(seq_len(nCells), function(x) {   out <- sample((seq_len(nCells))[-x], k)   out })  res <- calculateNomap(mtx, labels, k = k)  res #> $nomap #> [1] 0.3068182 #>  #> $mean_random_nomap #> [1] 0.2463601 #>  #> $corrected_trace #> [1] 1.245405 #>  #> $simulated #>  [1] 0.3431373 0.2679739 0.2581197 0.2371795 0.1412037 0.2820513 0.2063492 #>  [8] 0.2236842 0.2087542 0.2708333 0.2740385 0.1470085 0.2401961 0.2948718 #> [15] 0.3000000 #>  #> $map #>           l1        l2        l3 #> l1 0.3750000 0.3125000 0.0625000 #> l2 0.6363636 0.5454545 0.1818182 #> l3 1.0000000 0.0000000 0.0000000 #>"},{"path":"/reference/heatNomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the nomap map matrix as a heatmap — heatNomap","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"calculateNomap function returns matrix showing number cells label neighborhood cells label argument return.map = TRUE. function plots matrix heatmap, can used clustering diagnostic.","code":""},{"path":"/reference/heatNomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"","code":"heatNomap(nomap, ...)"},{"path":"/reference/heatNomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"nomap Output calculateNomap. ... arguments passed pheatmap customize plot.","code":""},{"path":"/reference/heatNomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"pheatmap object.","code":""},{"path":"/reference/heatNomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"","code":"library(BiocNeighbors) g <- findKNN(iris[, seq_len(4)], k = 10) #> Warning: detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index,     labels = iris$Species, k = 10,     return.map = TRUE ) heatNomap(res)"},{"path":"/reference/plotNomapSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density plot of simulated results — plotNomapSim","title":"Plot density plot of simulated results — plotNomapSim","text":"nomap traces permuted labels represent null distribution trace. can plotted density plot visually compared actual value.","code":""},{"path":"/reference/plotNomapSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density plot of simulated results — plotNomapSim","text":"","code":"plotNomapSim(nomap, ...)"},{"path":"/reference/plotNomapSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density plot of simulated results — plotNomapSim","text":"nomap Output calculateNomap. ... arguments passed geom_density.","code":""},{"path":"/reference/plotNomapSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density plot of simulated results — plotNomapSim","text":"ggplot2 object. density plot shows simulated nomap coefficient permuted labels, vertical line shows actual nomap coefficient.","code":""},{"path":"/reference/plotNomapSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density plot of simulated results — plotNomapSim","text":"","code":"library(BiocNeighbors) g <- findKNN(iris[, seq_len(4)], k = 10) #> Warning: detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10) plotNomapSim(res)"},{"path":"/news/index.html","id":"nomapr-0990-03312023","dir":"Changelog","previous_headings":"","what":"nomapR 0.99.0 (03/31/2023)","title":"nomapR 0.99.0 (03/31/2023)","text":"Submitted Biconductor.","code":""}]
