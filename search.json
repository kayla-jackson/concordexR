[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jackson Kayla. Author, maintainer. Lambda Moses. Author. Laura Luebbert. Contributor. Lior Pachter. Author, reviewer, thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kayla J, Moses L, Pachter L (2023). nomapR: Calculate nomap coefficient. R package version 0.99.0, https://github.com/kayla-jackson/nomapR.","code":"@Manual{,   title = {nomapR: Calculate the nomap coefficient},   author = {Jackson Kayla and Lambda Moses and Lior Pachter},   year = {2023},   note = {R package version 0.99.0},   url = {https://github.com/kayla-jackson/nomapR}, }"},{"path":"/index.html","id":"nomapr","dir":"","previous_headings":"","what":"Calculate the nomap coefficient","title":"Calculate the nomap coefficient","text":"goal nomapR replace UMAP clustering diagnostic.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate the nomap coefficient","text":"can install development version nomapR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kayla-jackson/nomapR\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calculate the nomap coefficient","text":"basic example shows solve common problem:","code":"library(nomapR) library(BiocNeighbors) g <- findKNN(iris[,seq_len(4)], k = 10) #> Warning in (function (to_check, X, clust_centers, clust_info, dtype, nn, : #> detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10, return.map = TRUE) plotNomapSim(res) heatNomap(res)"},{"path":"/reference/calculateNomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Nomap coefficient — calculateNomap","title":"Compute the Nomap coefficient — calculateNomap","text":"Compute raw corrected nomap coefficient using neighborhood graph observation labels.","code":""},{"path":"/reference/calculateNomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Nomap coefficient — calculateNomap","text":"","code":"calculateNomap(x, ...)  # S4 method for ANY calculateNomap(x, ...)"},{"path":"/reference/calculateNomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Nomap coefficient — calculateNomap","text":"x numeric matrix specifying neighborhood structure observations. Typically adjacency matrix produced k-Nearest Neighbor algorithm. labels numeric character vector containing label class corresponding observation. example, cell type cluster ID. k Number neighbors expect observation. Defaults 20. n.iter number specifying number permutations correcting coefficient. return.map Logical, whether return matrix number cells label neighborhood cells label. BPPARAM BiocParallelParam object specifying whether computing metric numerous observations shall parallelized.","code":""},{"path":"/reference/calculateNomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Nomap coefficient — calculateNomap","text":"named list following components: nomap raw nomap coefficient corresponding original label assignments. mean_random_nomap average n.iter nomap coefficients. Nomap coefficients computed permuting labels reassigning new observations. corrected_nomap Simply raw nomap coefficient divided average permuted coefficients. simulated Numeric vector nomap coefficients permuted labels, showing null distribution. map Numeric matrix number cells label neighborhood cells label. returned return.map = TRUE.","code":""},{"path":"/reference/calculateNomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Nomap coefficient — calculateNomap","text":"","code":"# Simplest case where input is a nxn matrix # Neighbors can be oriented along the rows or columns ncells <- 10 k <- 3 labels <- sample(paste0(\"l\",1:3), ncells, replace=TRUE)  mtx <- sapply(1:ncells, function(x) {   out <- rep(0,ncells)   out[-x] <- sample(c(rep(1,k), rep(0, ncells-k-1)))   out })  res <- calculateNomap(mtx, labels, k=k)  res #> $nomap #> [1] 0.3119048 #>  #> $mean_random_nomap #> [1] 0.2721393 #>  #> $corrected_trace #> [1] 1.146122 #>  #> $simulated #>  [1] 0.2847222 0.3164488 0.2862319 0.1587302 0.1818182 0.2738095 0.2083333 #>  [8] 0.3633041 0.2098039 0.2862319 0.3140097 0.2717391 0.2253968 0.3973430 #> [15] 0.3041667 #>   # Also works if input matrix is nxk or kxn mtx <- sapply(1:ncells, function(x) {   out <- sample((1:ncells)[-x], k)   out })  res <- calculateNomap(mtx, labels, k=k)  res #> $nomap #> [1] 0.3518519 #>  #> $mean_random_nomap #> [1] 0.2607794 #>  #> $corrected_trace #> [1] 1.349232 #>  #> $simulated #>  [1] 0.2222222 0.1754386 0.2827381 0.2922559 0.2796452 0.2000000 0.2000000 #>  [8] 0.1666667 0.3703704 0.3384687 0.3518519 0.2516340 0.3063910 0.2351190 #> [15] 0.2388889 #>"},{"path":"/reference/heatNomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the nomap map matrix as a heatmap — heatNomap","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"calculateNomap function returns matrix showing number cells label neighborhood cells label argument return.map = TRUE. function plots matrix heatmap, can used clustering diagnostic.","code":""},{"path":"/reference/heatNomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"","code":"heatNomap(nomap, ...)"},{"path":"/reference/heatNomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"nomap Output calculateNomap. ... arguments passed pheatmap customize plot.","code":""},{"path":"/reference/heatNomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"pheatmap object.","code":""},{"path":"/reference/heatNomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"","code":"library(BiocNeighbors) g <- findKNN(iris[,seq_len(4)], k = 10) #> Warning: detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10,                       return.map = TRUE) heatNomap(res)"},{"path":"/reference/plotNomapSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density plot of simulated results — plotNomapSim","title":"Plot density plot of simulated results — plotNomapSim","text":"nomap traces permuted labels represent null distribution trace. can plotted density plot visually compared actual value.","code":""},{"path":"/reference/plotNomapSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density plot of simulated results — plotNomapSim","text":"","code":"plotNomapSim(nomap, ...)"},{"path":"/reference/plotNomapSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density plot of simulated results — plotNomapSim","text":"nomap Output calculateNomap. ... arguments passed geom_density.","code":""},{"path":"/reference/plotNomapSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density plot of simulated results — plotNomapSim","text":"ggplot2 object. density plot shows simulated nomap coefficient permuted labels, vertical line shows actual nomap coefficient.","code":""},{"path":"/reference/plotNomapSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density plot of simulated results — plotNomapSim","text":"","code":"library(BiocNeighbors) g <- findKNN(iris[,seq_len(4)], k = 10) #> Warning: detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10) plotNomapSim(res)"}]
