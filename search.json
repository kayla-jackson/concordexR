[{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jackson Kayla. Author, maintainer. Lambda Moses. Author. Laura Luebbert. Contributor. Lior Pachter. Author, reviewer, thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kayla J, Moses L, Pachter L (2023). nomapR: Calculate nomap coefficient. R package version 0.99.0, https://github.com/kayla-jackson/nomapR.","code":"@Manual{,   title = {nomapR: Calculate the nomap coefficient},   author = {Jackson Kayla and Lambda Moses and Lior Pachter},   year = {2023},   note = {R package version 0.99.0},   url = {https://github.com/kayla-jackson/nomapR}, }"},{"path":"/index.html","id":"nomapr","dir":"","previous_headings":"","what":"Calculate the nomap coefficient","title":"Calculate the nomap coefficient","text":"goal nomapR replace UMAP clustering diagnostic.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate the nomap coefficient","text":"can install development version nomapR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kayla-jackson/nomapR\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calculate the nomap coefficient","text":"basic example shows solve common problem:","code":"library(nomapR) library(BiocNeighbors) g <- findKNN(iris[,seq_len(4)], k = 10) #> Warning in (function (to_check, X, clust_centers, clust_info, dtype, nn, : #> detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10, return.map = TRUE) plotNomapSim(res) heatNomap(res)"},{"path":"/reference/calculateNomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Nomap coefficient — calculateNomap","title":"Compute the Nomap coefficient — calculateNomap","text":"Compute raw corrected nomap coefficient using neighborhood graph observation labels.","code":""},{"path":"/reference/calculateNomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Nomap coefficient — calculateNomap","text":"","code":"calculateNomap(x, ...)  # S4 method for ANY calculateNomap(x, ...)"},{"path":"/reference/calculateNomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Nomap coefficient — calculateNomap","text":"x numeric matrix specifying neighborhood structure observations. Typically adjacency matrix produced k-Nearest Neighbor algorithm. labels numeric character vector containing label class corresponding observation. example, cell type cluster ID. k Number neighbors expect observation. Defaults 20. n.iter number specifying number permutations correcting coefficient. return.map Logical, whether return matrix number cells label neighborhood cells label. BPPARAM BiocParallelParam object specifying whether computing metric numerous observations shall parallelized.","code":""},{"path":"/reference/calculateNomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Nomap coefficient — calculateNomap","text":"named list following components: nomap raw nomap coefficient corresponding original label assignments. mean_random_nomap average n.iter nomap coefficients. Nomap coefficients computed permuting labels reassigning new observations. corrected_nomap Simply raw nomap coefficient divided average permuted coefficients. simulated Numeric vector nomap coefficients permuted labels, showing null distribution. map Numeric matrix number cells label neighborhood cells label. returned return.map = TRUE.","code":""},{"path":"/reference/calculateNomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Nomap coefficient — calculateNomap","text":"","code":"# Simplest case where input is a nxn matrix # Neighbors can be oriented along the rows or columns ncells <- 10 k <- 3 labels <- sample(paste0(\"l\",1:3), ncells, replace=TRUE)  mtx <- sapply(1:ncells, function(x) {   out <- rep(0,ncells)   out <- sample(c(rep(1,k), rep(0, ncells-k-1)))   out })  res <- calculateNomap(mtx, labels, k=k) #> Error in if (axis == 1) {    return(3)}: argument is of length zero  res #> Error in eval(expr, envir, enclos): object 'res' not found  # Also works if input matrix is nxk or kxn mtx <- sapply(1:ncells, function(x) {   out <- sample((1:ncells)[-x], k)   out })  res <- calculateNomap(mtx, labels, k=k)  res #> $nomap #> [1] 0.222619 #>  #> $mean_random_nomap #> [1] 0.2550515 #>  #> $corrected_trace #> [1] 0.8728396 #>  #> $simulated #>  [1] 0.2055556 0.2717172 0.2245421 0.2555556 0.2187257 0.2371795 0.2721612 #>  [8] 0.1606061 0.3954934 0.1583333 0.2751323 0.2500000 0.2952862 0.3272792 #> [15] 0.2782051 #>"},{"path":"/reference/heatNomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the nomap map matrix as a heatmap — heatNomap","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"calculateNomap function returns matrix showing number cells label neighborhood cells label argument return.map = TRUE. function plots matrix heatmap, can used clustering diagnostic.","code":""},{"path":"/reference/heatNomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"","code":"heatNomap(nomap, ...)"},{"path":"/reference/heatNomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"nomap Output calculateNomap. ... arguments passed pheatmap customize plot.","code":""},{"path":"/reference/heatNomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"pheatmap object.","code":""},{"path":"/reference/heatNomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the nomap map matrix as a heatmap — heatNomap","text":"","code":"library(BiocNeighbors) g <- findKNN(iris[,seq_len(4)], k = 10) #> Warning: detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10,                       return.map = TRUE) heatNomap(res)"},{"path":"/reference/plotNomapSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density plot of simulated results — plotNomapSim","title":"Plot density plot of simulated results — plotNomapSim","text":"nomap traces permuted labels represent null distribution trace. can plotted density plot visually compared actual value.","code":""},{"path":"/reference/plotNomapSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density plot of simulated results — plotNomapSim","text":"","code":"plotNomapSim(nomap, ...)"},{"path":"/reference/plotNomapSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density plot of simulated results — plotNomapSim","text":"nomap Output calculateNomap. ... arguments passed geom_density.","code":""},{"path":"/reference/plotNomapSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density plot of simulated results — plotNomapSim","text":"ggplot2 object. density plot shows simulated nomap coefficient permuted labels, vertical line shows actual nomap coefficient.","code":""},{"path":"/reference/plotNomapSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density plot of simulated results — plotNomapSim","text":"","code":"library(BiocNeighbors) g <- findKNN(iris[,seq_len(4)], k = 10) #> Warning: detected tied distances to neighbors, see ?'BiocNeighbors-ties' res <- calculateNomap(g$index, labels = iris$Species, k = 10) plotNomapSim(res)"}]
